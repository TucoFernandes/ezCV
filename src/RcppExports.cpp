// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// MME
Rcpp::List MME(const arma::mat& y, const arma::mat& X, const arma::mat& Z, const arma::mat& K);
RcppExport SEXP _ezCV_MME(SEXP ySEXP, SEXP XSEXP, SEXP ZSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(MME(y, X, Z, K));
    return rcpp_result_gen;
END_RCPP
}
// LOOCV_DG
arma::vec LOOCV_DG(arma::mat& y, arma::mat& K, double lambda, arma::vec& g);
RcppExport SEXP _ezCV_LOOCV_DG(SEXP ySEXP, SEXP KSEXP, SEXP lambdaSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(LOOCV_DG(y, K, lambda, g));
    return rcpp_result_gen;
END_RCPP
}
// kCV_DG
arma::vec kCV_DG(arma::vec& Y, arma::mat& K, double lambda, arma::vec& folds, arma::vec& g);
RcppExport SEXP _ezCV_kCV_DG(SEXP YSEXP, SEXP KSEXP, SEXP lambdaSEXP, SEXP foldsSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type folds(foldsSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(kCV_DG(Y, K, lambda, folds, g));
    return rcpp_result_gen;
END_RCPP
}
// RRBLUP
Rcpp::List RRBLUP(const arma::mat& y, const arma::mat& X, const arma::mat& M);
RcppExport SEXP _ezCV_RRBLUP(SEXP ySEXP, SEXP XSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(RRBLUP(y, X, M));
    return rcpp_result_gen;
END_RCPP
}
// LOOrrDG
arma::vec LOOrrDG(arma::mat& Y, arma::mat& X, arma::mat& B, double lambda);
RcppExport SEXP _ezCV_LOOrrDG(SEXP YSEXP, SEXP XSEXP, SEXP BSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(LOOrrDG(Y, X, B, lambda));
    return rcpp_result_gen;
END_RCPP
}
// cvBayes
arma::mat cvBayes(arma::mat Y, arma::mat B, arma::mat X, arma::vec varE);
RcppExport SEXP _ezCV_cvBayes(SEXP YSEXP, SEXP BSEXP, SEXP XSEXP, SEXP varESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type varE(varESEXP);
    rcpp_result_gen = Rcpp::wrap(cvBayes(Y, B, X, varE));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ezCV_MME", (DL_FUNC) &_ezCV_MME, 4},
    {"_ezCV_LOOCV_DG", (DL_FUNC) &_ezCV_LOOCV_DG, 4},
    {"_ezCV_kCV_DG", (DL_FUNC) &_ezCV_kCV_DG, 5},
    {"_ezCV_RRBLUP", (DL_FUNC) &_ezCV_RRBLUP, 3},
    {"_ezCV_LOOrrDG", (DL_FUNC) &_ezCV_LOOrrDG, 4},
    {"_ezCV_cvBayes", (DL_FUNC) &_ezCV_cvBayes, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_ezCV(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
